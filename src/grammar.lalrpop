use std::str::FromStr;
use crate::ast::*;
use crate::merge_terms;
use itertools::{Itertools, Either};
use std::collections::HashMap;
use lalrpop_util::ParseError;
use std::borrow::Cow;

grammar;

extern {
    type Error = (usize, String, usize);
}

match {
    // Keywords
    "target",
    "create",
    "using",
    "in",
    "minimize",
    "resources",
    "reactions",

    // Structural tokens
    "{",
    "}",
    ")->",
    "-(",
    "+",
    "-",
    ",",
    ";",
    ":",

    // Identifier
    r"[_a-zA-Z][_a-zA-Z0-9\-]*" => identifier,

    // Literals
    r"[0-9]+" => int,
    r#""(\\"|[^"])*""# => dstring,
    r"'(\\'|[^'])*'" => sstring,

    // Whitespaces
    r"\s+" => {},

    // Line comments
    r"//[^\n]*\n" => {},

    // Block comments
    r"/\*([^*]|(\*[^/]))*\*/" => {},
}

Sum<T>: Vec<T> = {
    <mut v:(<T> "+")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Label: Cow<'input, str> = {
    <ident: identifier> => Cow::Borrowed(ident),
    <string: sstring> => Cow::Owned(String::from(&string[1..string.len()-1])),
    <string: dstring> => Cow::Owned(String::from(&string[1..string.len()-1])),
}

Reaction: Reaction<'input> = {
    <label: (<Label> ":")?> <inputs: Sum<ReactionTerm>>
    "-(" <minus: "-"?> <cost: int> ")->"
    <outputs: Sum<ReactionTerm>>
    ";" => {
        Reaction {
            label,
            inputs: inputs
                .into_iter()
                .reduce(merge_terms)
                .unwrap_or_default()
            ,
            cost: Cost(
                if minus.is_some() {
                    -1
                } else {
                    1
                }
                * isize::from_str(cost).unwrap()
            ),
            outputs: outputs
                .into_iter()
                .reduce(merge_terms)
                .unwrap_or_default()
        }
    }
};

ReactionTerm: ReactionTerms<'input> = {
    <scalar: int?> <symbol: identifier> => {
        let mut res = HashMap::new();
        res.insert(Symbol(symbol),  scalar.map(|x| usize::from_str(x).unwrap()).unwrap_or(1));
        res
    }
};

Goal: Goal<'input> = {
    "resources" <rt: Sum<ReactionTerm>> => Goal::Resources(rt.into_iter().reduce(merge_terms).unwrap_or_default()),
    "reactions" => Goal::Reactions,
}

TargetItem: TargetItem<'input> = {
    "using" <symbols: Comma<identifier>> => TargetItem::Input(symbols.into_iter().map(Symbol).collect()),
    "create" <terms: Sum<ReactionTerm>> => TargetItem::Constraint(terms),
    "in" <time: int> => TargetItem::InTime(usize::from_str(time).unwrap()),
    "minimize" <goal: Goal> => TargetItem::Goal(goal),
}

Target: Target<'input> = {
    <tl: @L> "target" <name: identifier> "{"
        <target_items: (<@L> <TargetItem> <@R> ";")*>
    "}" <tr: @R> =>? {
        let mut inputs = Vec::new();
        let mut constraints = Vec::new();
        let mut in_time = None;
        let mut goal = None;

        for (l, i, r) in target_items {
            match i {
                TargetItem::Input(i) => inputs.push(i),
                TargetItem::Constraint(i) => constraints.push(i),
                TargetItem::InTime(i) => {
                    if in_time.replace(i).is_some() {
                        return Err(ParseError::User {
                            error: (l, format!("duplicate 'in' specification in {name}"), r)
                        });
                    }
                }
                TargetItem::Goal(i) => {
                    if goal.replace(i).is_some() {
                        return Err(ParseError::User {
                            error: (l, format!("duplicate 'goal' specification in {name}"), r)
                        });
                    }
                }
            }
        }

        Ok(Target {
            name,
            inputs: inputs.into_iter().flatten().collect(),
            constraints: constraints.into_iter().flatten().reduce(merge_terms).unwrap_or_default(),
            in_time: in_time.unwrap_or(1),
            goal,
            span: (tl, tr),
        })
    }
};

Item: Item<'input> = {
    Target => Item::Target(<>),
    Reaction => Item::Reaction(<>),
}

pub Program: Program<'input> = {
    <items: Item*> => {
        let (targets, reactions) = items
            .into_iter()
            .partition_map(|i| match i {
                Item::Target(t) => Either::Left((t.name, t)),
                Item::Reaction(r) => Either::Right(r),
            });

        Program {
            reactions,
            targets
        }
    }
};